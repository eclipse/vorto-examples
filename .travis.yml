sudo: required
dist: trusty

jobs:
  include:
    - stage: deploy-middleware-frontend-aws
      name: "Deploys the Vorto-Middleware Frontend to AWS Beanstalk"
      language: node_js
      node_js:
        - '10'
      script:
      before_install:
        - cd vorto-middleware/frontend
      install:
        - npm install -g @angular/cli
        - npm install
      after_success:
        - ng build --configuration aws --aot
      before_deploy:
        - cd dist
        - zip -r middleware-frontend.zip .
        - export ELASTIC_BEANSTALK_DESCRIPTION="Build-Job ${TRAVIS_JOB_NUMBER} - Git Revision ${TRAVIS_COMMIT_SHORT} vorto-middleware-frontend "
        - export ELASTIC_BEANSTALK_ENV=vorto-middleware-frontend-${TRAVIS_BRANCH}
        - export ELASTIC_BEANSTALK_LABEL=git-$(git rev-parse --verify HEAD --short)
        - export ARTIFACT=$(ls middleware-frontend.zip)
      deploy:
        provider: elasticbeanstalk
        access_key_id: "$VORTO_AWS_ACCESS_KEY"        
        secret_access_key: "$VORTO_AWS_SECRET_KEY"
        zip-file: "${ARTIFACT}"
        skip_cleanup: true
        region: "$VORTO_S3_REGION"  
        app: "Vorto-Payload-Normalizer-Service"
        env: "Vorto-Middleware-Frontend-Dev"
        bucket_name: "$VORTO_S3_BUCKET"
        on:
          branch: master 
    
    - stage: deploy-middleware-backend-aws
      name: "Deploys the Vorto-Middleware Backend to AWS Beanstalk"
      language: java
      jdk: oraclejdk8
      before_script:
      script:
      before_install:
        - cd vorto-middleware/middleware-service
      before_deploy:
        - export ELASTIC_BEANSTALK_DESCRIPTION="Build-Job ${TRAVIS_JOB_NUMBER} - Git Revision ${TRAVIS_COMMIT_SHORT} vorto-middleware "
        - export ELASTIC_BEANSTALK_ENV=vorto-middleware-service-${TRAVIS_BRANCH}
        - export ELASTIC_BEANSTALK_LABEL=git-backend-$(git rev-parse --verify HEAD --short)
        - export ARTIFACT_BACKEND=$(ls target/middleware-service-*.jar)
      deploy:
        provider: elasticbeanstalk
        access_key_id: "$VORTO_AWS_ACCESS_KEY"        
        secret_access_key: "$VORTO_AWS_SECRET_KEY"
        zip_file: "${ARTIFACT_BACKEND}"
        skip_cleanup: true
        region: "$VORTO_S3_REGION"  
        app: "Vorto-Payload-Normalizer-Service"
        env: "Payload-Normalizer-Dev"
        bucket_name: "$VORTO_S3_BUCKET"
    
    - stage: deploy-dashboard-aws
      name: "Deploys the Vorto-Dashboard to AWS Beanstalk"
      language: node_js
      node_js:
        - '10'
      before_script:
      script:
      
      before_install:
        - cd vorto-dashboard
      
      install:
        - echo "Installing dependencies"
        - yarn install
      
      after_success:
        - echo "Creating build"
        - npm run build
        - npm run-script dist
        
      before_deploy:
        - rm -rf .tmp
        - rm -rf .DS_Store
        - rm -rf node_modules
        - export ELASTIC_BEANSTALK_ENV=vorto-dashboard-${TRAVIS_BRANCH}
        - export ELASTIC_BEANSTALK_LABEL=git-$(git rev-parse --verify HEAD --short)
        - export ELASTIC_BEANSTALK_DESCRIPTION="Build-Job ${TRAVIS_JOB_NUMBER} - Git Revision ${TRAVIS_COMMIT_SHORT} vorto-dashboard "
      
      deploy:
        provider: elasticbeanstalk
        access_key_id: "$VORTO_AWS_ACCESS_KEY"
        secret_access_key: "$VORTO_AWS_SECRET_KEY"
        zip-file: "dist/vorto-dashboard.zip"
        skip_cleanup: true
        region: "$VORTO_S3_REGION"
        app: "Vorto Dashboard"
        env: "VortoDashboard-dev"
        only_create_app_version: false
        bucket_name: "$VORTO_S3_BUCKET"
        on:
          branch: master
      

    - stage: deploy-npm
      name: "Publish Vorto-Dashboard to NPM"
      language: node_js
      node_js:
        - '10'
        
      cache:
        yarn: true
        directories:
          - ~/.cache
      
      before_install:
        - cd vorto-dashboard
      
      install:
        - echo "Installing dependencies"
        - yarn install
      
      after_success:
        - echo "Creating build"
        - npm run build
        - npm run dist
        
      before_deploy:
        - echo "Preparing for deploy to NPM" 
        - cd dist
        
      deploy:
        provider: npm
        skip_cleanup: true
        email: Alexander.Edelmann@bosch-si.com
        api_key:
          secure: "$NPM_API_KEY"
        on:
          tags: true
          branches:
            only:
              - master
  
